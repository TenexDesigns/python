for loops - Execute a block of code a fixed number of times.
             You can iterarte over a range ,string , sequence , e.t.c
             
       We put the range in a range function.We start at 1 abd end at 7 .Because the last number is not inclusive
       
             
for i in range(1,8):
    print(f"This is number {i}")


______________________________________The result is


This is number 1
This is number 2
This is number 3
This is number 4
This is number 5
This is number 6
This is number 7




To reverse the order , we use the reversed function





for i in reversed(range(1,8)):
    print(f"This is number {i}")


______________________________________The result is


This is number 7
This is number 6
This is number 5
This is number 4
This is number 3
This is number 2
This is number 1









There is a third parameter you can add if you want your loop to increment by more than 1

Here we want our code to run after 2 




             
for i in range(1,8,2):
    print(f"This is number {i}")


______________________________________The result is


This is number 1
This is number 3
This is number 5
This is number 7






YOU CAN ALSO ITETATE OVER A STRING



BOOK ="George"
             
for i in BOOK:
    print(f"This is number {i}")
    
    
    
    
    
    ____________________The result is 
    G
    e
    o
    r
    g
    e





TO SKIP AND BREAK FROM A FOR/WHILE LOOP ,WE CAN USE THE CONTINUE AND THE BREAK KEYWORD


CONTINUE
Contiue is used to skip something in a loop

This will skip the number 4


for i in range(1,8):
    if i == 4:
      continue
     else: 
    print(f"This is number {i}")


______________________________________The result is


This is number 1
This is number 2
This is number 3
This is number 5
This is number 6
This is number 7







BREAK

Break is used to break out of a loop and stop that loop or stop that iteration.



for i in range(1,8):
    if i == 4:
        break
     else:   
    print(f"This is number {i}")


______________________________________The result is


This is number 1
This is number 2
This is number 3
  The four is not inclusive.









_________________________________________________________________________________________________________________________________________________________


In Python, a for loop is used to iterate over a sequence of elements, such as a list, tuple, or string, and perform an action on each element.
The syntax for a for loop in Python is as follows:



for variable in sequence:
    # code to execute for each element in the sequence



Here, the variable represents the current element of the sequence being iterated over. 
The sequence is any iterable object, such as a list, tuple, string, or generator.

For example, the following code uses a for loop to iterate over a list of numbers and print each number:


numbers = [1, 2, 3, 4, 5]
for num in numbers:
    print(num)



Output:


1
2
3
4
5


You can also use the range() function to generate a sequence of numbers to iterate over.
The range() function takes up to three arguments: start, stop, and step.

For example, the following code uses a for loop to iterate over a sequence of numbers generated by the range() function:


for i in range(1, 6):
    print(i)


Output:


1
2
3
4
5




You can also use the enumerate() function to iterate over both the index and value of a sequence at the same time:


fruits = ["apple", "banana", "cherry"]
for i, fruit in enumerate(fruits):
    print(i, fruit)



Output:



0 apple
1 banana
2 cherry


Finally, you can use the break statement to exit a for loop prematurely, or the continue statement to skip over an iteration:


for i in range(1, 11):
    if i == 5:
        break
    if i % 2 == 0:
        continue
    print(i)



Output:

1
3





































..
